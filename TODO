- parler de permissions et de sudo
- planifier vitesse rapide si les gens savent de vitesse plus lente
- parler de CI gitlab ? de git ? de gitpod ? 
- REFAIRE TP SUR REDIS ET VOLUMES AVEC AUTRE CHOSE + plus explicite pour le réseau
=> mon search cards pas CRUD, plutot le flask machin non ?
- expliquer comment on stocke les images et les conteneurs et les volumes cocnrètement
- s'étendre plus longuement sur la partie comment marchent les hashes et l'overlayfs à coup de copiers collers de linux
- ouvrir sur k8s ou elk ou gitlab CI selon leur intérêt.
Ou simplement sur des trucs tordus d'app stateful (snapshots jsp)
- partie sur git qd même ? important car infra as code, ouverture sur CI ? laisser les avancés plancher sur une CI gitlab ? vu qu'ils sont un peu ce profil
- QCM ARGH
- faire faire du git à ceux qui sont trop en avance ?
- podman / buildah ?
- upload sur un registry

- Au début demo avec scaleway hop je mets un docker, hop un codimd et un nginx et boum. 
- Souligner que'intérêt est de déployer facilement.
- Pour rappels linux, explorer justement bien le réseau avec le ssh dans scaleway, et les k ter face spour comprendre les interfaces docker. Pour comprendre, les volumes parler des permissions pour comprendre le chroot. 
- Pour comprendre les images prendre l'extrait des cours Linux qui parlent de tar.gz et décortiquer une image pour comprendre eque c'est qu'un rootfs gzipé, avec du overlayfs. 
- Pour le to volume et réseau faire l'app flask avec le mysql. Si marche pas garder redis mais dire qu'il y a du cache et que ça soulingen l'importance et les limite du stateless vs stateful. Fsite fzire un script pour migrer du stateful redis Moby counter? 
- Leur demander de générer une clé ssh et me l'envoyer la clé publique par mail ou alors le servir avec nginx et me donner leur IP. 
- Leur donner 6 vm scaleway, leur faire foutre portainer dessus (commande ssh de la socket ? ou socat ?) puis protéger avec nginx (ou traefik) avec auth http. Ajouter swarm et hop c'est redondant. Autre vm avec swarm et pouf c'est resilient la.
- Du coup faire faire déployer d'abord la flask app puis elk et flask avec elk puis WordPress, nextcloud, codimd, MediaWiki ou dokuwiki.
En gros a la fin ils on un ynh cheap et avec ci pour les plus avances. 
- Faire faire une ci gitlab pour les avancés pour qu'ils comprennent la puissance d'avoir packagé docker. Du coup faire git et framagit forcément, plutôt en jour 1 même. 
piquer des trucs du tuto de fergus ?
- dire que la ref docker est cool à checker car elle change tout le temps
- dire que docker compose wordpress tout fait là https://hub.docker.com/_/wordpress ou là https://docs.docker.com/compose/wordpress/
- same with nextcloud https://hub.docker.com/_/nextcloud or here https://github.com/nextcloud/docker

- ajout d'exemple du build multi image

- remplacer dans tp3 par un truc avec microblog et un volume sur sqlite file (app/app.db ou app.db) puis mysql puis docker-compose avec elasticsearch (en insistant sur le fait que c'est intenable à la main et là l'utilité de dockercompose)
- ajouter les "expand"



- tester redis et dire pour le cache rdb
- !!! moby counter contacts redis as client JS not server !!!
- +WordPress config a la main  et extraire fichier d econf puis avec vars env en tp3 volume et réseau ?
-  Virzr optio  link docker
- chapitre cours containers Windows



TESTS connexions :
- un proxy HTTP c'est censuré aussi ?
- Et wsl en fait ?
- brng your own amchine + tethering
- guacamole VNC ?
- demander ouverture du SSH ou de VNC pour la salle

